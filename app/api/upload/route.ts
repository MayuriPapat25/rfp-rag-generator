// app/api/upload/route.ts

// Import necessary modules from Next.js, Node.js file system, and path utilities.
import { NextRequest, NextResponse } from "next/server";
import { writeFile, mkdir } from "fs/promises"; // For asynchronous file writing and directory creation
import * as path from "path"; // For path manipulation (joining, resolving)
import * as fs from "fs"; // For synchronous file system operations like checking if a directory exists

// Import external libraries for document parsing
import mammoth from "mammoth";
import pdfParse from "pdf-parse";

// Import your custom database and embedding functions
import { addDocument } from "@/lib/db"; // Assuming this handles storing document metadata/content/embedding
import { generateEmbedding } from "@/lib/embeddings"; // Assuming this generates embeddings with Ollama

// Define the base directory where all uploaded project knowledge base documents will be stored.
// This path is relative to the project root.
const KNOWLEDGE_BASE_BASE_PATH = "knowledge_base";

// Define the structure for a document entry, reflecting what addDocument expects.
interface DocumentEntry {
  id?: string; // Optional if generated by addDocument
  filename: string;
  fileType: string;
  content: string;
  embedding?: number[];
  projectName: string; // <--- ADDED projectName to the document entry
  createdAt: number;
}

/**
 * Handles POST requests for file uploads.
 * It expects a 'file' (the document) and a 'projectName' in the FormData.
 */
export async function POST(req: NextRequest) {
  try {
    console.log("Upload API: Received request.");

    // Use req.formData() directly, no need for `formidable`
    const formData = await req.formData();

    // Extract the 'file' and 'projectName' from the FormData.
    const file = formData.get("file") as File | null;
    const projectName = formData.get("projectName") as string | null; // <--- Extract projectName

    // --- Input Validation ---
    if (!file) {
      console.error("Upload API: No file received.");
      return NextResponse.json({ error: "No file received." }, { status: 400 });
    }
    if (!projectName || projectName.trim() === "") {
      console.error("Upload API: Project name is required.");
      return NextResponse.json(
        { error: "Project name is required for upload." },
        { status: 400 }
      );
    }

    const filename = file.name;
    const fileType = file.type;
    const trimmedProjectName = projectName.trim();
    console.log(
      `Upload API: Processing file: ${filename}, type: ${fileType} for project: ${trimmedProjectName}`
    );

    let fileContent = "";
    // Convert the uploaded file's ArrayBuffer data to a Node.js Buffer for parsing.
    const buffer = Buffer.from(await file.arrayBuffer());

    // --- Content Extraction based on File Type ---
    switch (fileType) {
      case "text/plain":
        fileContent = buffer.toString("utf-8");
        console.log(`Upload API: Successfully read text file content.`);
        break;
      case "application/pdf":
        try {
          const data = await pdfParse(buffer);
          fileContent = data.text;
          console.log(`Upload API: Successfully parsed PDF content.`);
        } catch (pdfError) {
          console.error("Upload API: Error parsing PDF file:", pdfError);
          fileContent = `Error parsing PDF: ${filename}. Content could not be extracted.`;
        }
        break;
      case "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
        try {
          // mammoth expects a Buffer or ArrayBuffer, which 'buffer' already is.
          const result = await mammoth.extractRawText({ buffer: buffer });
          fileContent = result.value;
          console.log(`Upload API: Successfully parsed DOCX content.`);
        } catch (docxError) {
          console.error("Upload API: Error parsing DOCX file:", docxError);
          fileContent = `Error parsing DOCX: ${filename}. Content could not be extracted.`;
        }
        break;
      default:
        console.error(`Upload API: Unsupported file type: ${fileType}`);
        return NextResponse.json(
          { error: "Unsupported file type." },
          { status: 400 }
        );
    }

    // --- Store Raw File Project-Wise ---
    // Construct the absolute path to the project-specific upload directory.
    const projectUploadDir = path.join(
      process.cwd(),
      KNOWLEDGE_BASE_BASE_PATH,
      trimmedProjectName
    );

    // Ensure the project-specific directory exists.
    if (!fs.existsSync(projectUploadDir)) {
      await mkdir(projectUploadDir, { recursive: true });
      console.log(
        `Created project upload directory for raw files: ${projectUploadDir}`
      );
    }

    // Define the full path where the raw file will be saved.
    const filePath = path.join(projectUploadDir, file.name);

    // Write the raw file to the project-specific directory.
    await writeFile(filePath, buffer);
    console.log(
      `Raw file uploaded successfully to project folder: ${filePath}`
    );

    // --- Generate Embedding for the Extracted Content ---
    console.log(
      "Upload API: Generating embedding for extracted content with Ollama..."
    );
    const embedding = await generateEmbedding(fileContent);
    console.log("Upload API: Generated embedding successfully.");

    // --- Store Document Details in Your File-Based Database (`@/lib/db`) ---
    // This `addDocument` function must be updated to accept `projectName`
    // to ensure your database also stores documents project-wise.
    const newDoc: DocumentEntry = await addDocument({
      filename,
      fileType,
      content: fileContent,
      embedding,
      projectName: trimmedProjectName, // <--- Pass projectName to your database function
      createdAt: Date.now(),
    });
    console.log("Upload API: Stored document in file-based database.", newDoc);

    // Return a success response.
    // Note: The message includes a reminder for manual ingestion.
    return NextResponse.json(
      {
        message: `File uploaded and processed successfully for project "${trimmedProjectName}". Remember to run 'npm run ingest' for this project to update the vector store!`,
        filePath: filePath, // Include file path for confirmation
        documentId: newDoc.id, // Include document ID if your db returns one
      },
      { status: 200 }
    );
  } catch (error: any) {
    // Catch any errors during the upload and processing
    console.error(
      "Upload API: General error during file upload and processing:",
      error
    );
    return NextResponse.json(
      {
        error: `Failed to upload and process file: ${
          error.message || "Unknown error"
        }`,
      },
      { status: 500 }
    );
  }
}
